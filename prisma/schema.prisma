datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AssessmentType {
  Full
  Screening
}

model Workflow {
  id                   String         @id @default(cuid())
  type                 AssessmentType
  answers              Json           @default("{}")
  socialCareId         String
  assessmentPackageUrl String?
  assessmentElements   String[]
  heldAt               DateTime?
  // revision history
  revisions            Revision[]
  // assignment
  assignedTo           String?
  assignee             User?          @relation(name: "assignee", fields: [assignedTo], references: [email])
  // 1. creation
  createdAt            DateTime       @default(now())
  createdBy            String
  creator              User?          @relation(name: "creator", fields: [createdBy], references: [email])
  // 2. submission
  submittedAt          DateTime?
  submittedBy          String?
  // 3. approval
  managerApprovedAt    DateTime?
  managerApprovedBy    String?
  // 4. panel approval
  panelApprovedAt      DateTime?
  panelApprovedBy      String?
  // 5. review
  previousReview       Workflow?      @relation("WorkflowToWorkflow", fields: [reviewOf], references: [id])
  reviewedAs           Workflow[]     @relation("WorkflowToWorkflow")
  reviewOf             String?
  // 6. discard
  discardedAt          DateTime?
  discardedBy          String?
  // most recent update
  updatedAt            DateTime       @updatedAt
  updatedBy            String?
  updater              User?          @relation(name: "updater", fields: [updatedBy], references: [email])
}

enum Action {
  Edited
  Submitted
  Approved
  PanelApproved
  Reviewed
  Discarded
}

model Revision {
  id         String    @id @default(cuid())
  action     Action
  answers    Json
  createdBy  String
  createdAt  DateTime  @default(now())
  actor      User?     @relation(name: "actor", fields: [createdBy], references: [email])
  // parent workflow
  workflow   Workflow? @relation(fields: [workflowId], references: [id])
  workflowId String?
}

// auth
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  accounts         Account[]
  sessions         Session[]
  createdWorkflows Workflow[] @relation("creator")
  updatedWorkflows Workflow[] @relation("updater")
  assignments      Workflow[] @relation("assignee")
  actions          Revision[] @relation("actor")

}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
