// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Resident {
  socialCareId String        @id
  assessments  Assessment[]
  SupportPlan  SupportPlan[]
}

model Assessment {
  id                   String       @id @default(cuid())
  createdAt            DateTime     @default(now())
  createdBy            String
  updatedAt            DateTime     @updatedAt
  answers              Json
  // associated resident
  resident             Resident?    @relation(fields: [residentSocialCareId], references: [socialCareId])
  residentSocialCareId String?
  // review self-join
  reviewOf             Assessment?  @relation("AssessmentToAssessment", fields: [assessmentId], references: [id])
  assessmentId         String?
  Assessment           Assessment[] @relation("AssessmentToAssessment")
  // submitted
  submittedAt          DateTime?
  submittedBy          String?
  // approval
  approvedAt           DateTime?
  approvedBy           String?
  // revision history
  revisions            Revision[]
}

model SupportPlan {
  id                   String        @id @default(cuid())
  createdAt            DateTime      @default(now())
  createdBy            String
  updatedAt            DateTime      @updatedAt
  answers              Json
  // associated resident
  resident             Resident?     @relation(fields: [residentSocialCareId], references: [socialCareId])
  residentSocialCareId String?
  // review self-join
  reviewOf             SupportPlan?  @relation("SupportPlanToSupportPlan", fields: [supportPlanId], references: [id])
  SupportPlan          SupportPlan[] @relation("SupportPlanToSupportPlan")
  supportPlanId        String?
  // submitted
  submittedAt          DateTime?
  submittedBy          String?
  // approval
  approvedAt           DateTime?
  approvedBy           String?
  // revision history
  revisions            Revision[]
}

model Revision {
  id            String       @id @default(cuid())
  answers       Json
  createdBy     String
  createdAt     DateTime     @default(now())
  // owning assessment
  Assessment    Assessment?  @relation(fields: [assessmentId], references: [id])
  assessmentId  String?
  // owning support plan
  SupportPlan   SupportPlan? @relation(fields: [supportPlanId], references: [id])
  supportPlanId String?
}

// auth
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
