datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AssessmentType {
  full
  screening
}

model Workflow {
  id                String         @id @default(cuid())
  type              AssessmentType
  createdAt         DateTime       @default(now())
  createdBy         String
  updatedAt         DateTime       @updatedAt
  answers           Json
  // associated resident
  socialCareId      String
  // review self-join
  previousReview    Workflow?      @relation("WorkflowToWorkflow", fields: [reviewOf], references: [id])
  reviewedAs        Workflow[]     @relation("WorkflowToWorkflow")
  reviewOf          String?
  // submitted
  submittedAt       DateTime?
  submittedBy       String?
  // approval
  managerApprovedAt DateTime?
  managerApprovedBy String?
  // panel approval
  panelApprovedAt   DateTime?
  panelApprovedBy   String?
  // revision history
  revisions         Revision[]
}

enum Action {
  Edited
  Approved
  PanelApproved
  Submitted
  Reviewed
}

model Revision {
  id         String    @id @default(cuid())
  action     Action
  answers    Json
  createdBy  String
  createdAt  DateTime  @default(now())
  // owning assessment
  workflow   Workflow? @relation(fields: [workflowId], references: [id])
  workflowId String?
}

// auth
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
