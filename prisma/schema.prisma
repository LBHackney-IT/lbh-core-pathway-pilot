datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum WorkflowType {
  Assessment
  Review
  Reassessment
}

model Workflow {
  id                String       @id @default(cuid())
  type              WorkflowType @default(Assessment)
  formId            String
  answers           Json         @default("{}")
  socialCareId      String
  heldAt            DateTime?
  // revision history
  revisions         Revision[]
  // assignment
  assignedTo        String?
  assignee          User?        @relation(name: "assignee", fields: [assignedTo], references: [email])
  // assignedTeam      String?
  // 1. creation
  createdAt         DateTime     @default(now())
  createdBy         String
  creator           User?        @relation(name: "creator", fields: [createdBy], references: [email])
  // 2. submission
  submittedAt       DateTime?
  submittedBy       String?
  submitter         User?        @relation(name: "submitter", fields: [submittedBy], references: [email])
  // 3. approval
  managerApprovedAt DateTime?
  managerApprovedBy String?
  managerApprover   User?        @relation(name: "managerApprover", fields: [managerApprovedBy], references: [email])
  // 4. panel approval
  panelApprovedAt   DateTime?
  panelApprovedBy   String?
  panelApprover     User?        @relation(name: "panelApprover", fields: [panelApprovedBy], references: [email])
  // 5. review self-join
  previousReview    Workflow?    @relation("WorkflowToWorkflow", fields: [workflowId], references: [id])
  nextReview        Workflow?    @relation("WorkflowToWorkflow")
  workflowId        String?
  reviewBefore      DateTime?
  // 6. discard
  discardedAt       DateTime?
  discardedBy       String?
  discarder         User?        @relation(name: "discarder", fields: [discardedBy], references: [email])
  // most recent update
  updatedAt         DateTime     @updatedAt
  updatedBy         String?
  updater           User?        @relation(name: "updater", fields: [updatedBy], references: [email])
  // manager comments
  comments          Comment[]
  // next steps this workflow has
  nextSteps         NextStep[]
}

enum Action {
  Edited
  Submitted
  Approved
  PanelApproved
  Reviewed
  Discarded
}

model Comment {
  id         String    @id @default(cuid())
  action     Action    @default(Edited)
  text       String
  // creator
  createdAt  DateTime  @default(now())
  createdBy  String
  creator    User?     @relation(fields: [createdBy], references: [email])
  // parent workflow
  workflow   Workflow? @relation(fields: [workflowId], references: [id])
  workflowId String?
}

model NextStep {
  id          String     @id @default(cuid())
  title       String
  description String?
  email       String?
  workflows   Workflow[]
}

model Revision {
  id        String   @id @default(cuid())
  action    Action   @default(Edited)
  answers   Json
  createdBy String
  createdAt DateTime @default(now())

  actor      User?     @relation(name: "actor", fields: [createdBy], references: [email])
  // parent workflow
  workflow   Workflow? @relation(fields: [workflowId], references: [id])
  workflowId String?
}

// auth
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

enum Team {
  InformationAssessment
  LongTermCare
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  team     Team?
  approver Boolean @default(false)

  actions  Revision[] @relation("actor")
  comments Comment[]

  createdWorkflows Workflow[] @relation("creator")
  updatedWorkflows Workflow[] @relation("updater")
  assignments      Workflow[] @relation("assignee")
  submissions      Workflow[] @relation("submitter")
  managerApprovals Workflow[] @relation("managerApprover")
  panelApprovals   Workflow[] @relation("panelApprover")
  discards         Workflow[] @relation("discarder")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
