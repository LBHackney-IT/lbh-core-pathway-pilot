name: On push to main

on:
  push:
    branches: [main]

env:
  TZ: Europe/London

jobs:
  ensure-lambda-image-is-cached:
    name: üóÉÔ∏è Cache AWS Lambda
    runs-on: ubuntu-latest
    steps:
      - uses: satackey/action-docker-layer-caching@v0.0.11
        with:
          key: docker-layer-caching-${{ runner.os }}
      - name: Attempt to pull lambda image
        run: |
          docker image prune -af
          docker pull public.ecr.aws/lambda/nodejs:14 || \
          echo "::notice ::Could not pull lambda image, using cached version"
        continue-on-error: true

  style-check:
    name: üíÖ Style Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: |
          npm ci --ignore-scripts
          npm install prisma@$(cat package.json | jq '.dependencies.prisma' -r)

      - name: Generate prisma exports
        run: npm run build:prisma

      - name: Run lint
        run: npm run lint

      - name: Check types
        run: npm run typecheck

  tests-browser:
    name: üñ•Ô∏è Browser Tests
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/postgres"
      APP_URL: http://localhost:3001
      CSRF_SECRET: test-secret
      HACKNEY_AUTH_TOKEN_SECRET: testTokenSecret
      HACKNEY_AUTH_COOKIE_NAME: testToken
      HACKNEY_AUTH_SERVER_URL: https://example.com/auth
      NEXT_PUBLIC_HACKNEY_AUTH_SERVER_URL: https://example.com/auth
      NODE_ENV: "test"
      ENVIRONMENT: "test"
      NEXT_PUBLIC_ENV: "test"
      NEXT_PUBLIC_SOCIAL_CARE_APP_URL: "https://example.com"
      SOCIAL_CARE_API_ENDPOINT: http://localhost:4010
      PORT: "3001"
      SENTRY_RELEASE: ${{github.sha}}
      SENTRY_DSN: ${{secrets.SENTRY_DSN}}
      SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm ci

      - name: Start Database
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: "13"
          postgresql db: "postgres"
          postgresql user: "postgres"
          postgresql password: "postgres"

      - name: Setup Database
        run: npm run db:push

      - name: Build app
        run: npm run build

      - name: Run browser tests
        uses: cypress-io/github-action@v2
        with:
          install: false
          start: npm start -- --hostname localhost, npm run test:mock:sccv
          wait-on: http://localhost:3001, http://localhost:4010/healthcheck/ping

      - name: Upload screenshots
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Upload videos
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

  tests-unit:
    name: üß™ Unit tests
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_API_HOST: "http://localhost:3000"
      APP_URL: "http://localhost:3000"
      NODE_ENV: "test"
      NEXT_PUBLIC_ENV: "test"
      NEXT_PUBLIC_SOCIAL_CARE_APP_URL: "http://example.com"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: |
          npm ci --ignore-scripts
          npm install prisma@$(cat package.json | jq '.dependencies.prisma' -r)

      - name: Generate prisma exports
        run: npm run build:prisma

      - name: Run unit tests
        run: npm test

  baseline-scan:
    name: üîç Baseline Scan
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
      NEXT_PUBLIC_API_HOST: http://localhost:3000
      APP_URL: http://localhost:3000
      NODE_ENV: production
      NEXT_PUBLIC_ENV: production
      NEXT_PUBLIC_SOCIAL_CARE_APP_URL: http://example.com
      PORT: 3000
      CSRF_SECRET: test-secret
      SENTRY_RELEASE: ${{github.sha}}
      SENTRY_DSN: ${{secrets.SENTRY_DSN}}
      SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Set up test database
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: "13"
          postgresql db: "postgres"
          postgresql user: "postgres"
          postgresql password: "postgres"

      - name: Install dependencies
        env:
          NODE_ENV: development
        run: npm ci

      - name: Apply database schema
        run: npm run db:push

      - name: Seed database
        run: npm run db:seed

      - name: Build app
        run: npm run build

      - name: Start app
        run: npm start &

      - name: OWASP Baseline Scan
        uses: zaproxy/action-baseline@v0.5.0
        with:
          docker_name: owasp/zap2docker-stable:2.10.0
          fail_action: true
          rules_file_name: .zap-baseline.conf
          target: http://localhost:3000/

  deploy-testing:
    name: üöß Deploy to Testing
    concurrency: deploying-testing
    environment:
      name: Service - Testing
    runs-on: ubuntu-latest
    needs:
      - style-check
      - tests-unit
      - ensure-lambda-image-is-cached
    env:
      ENVIRONMENT: dev
      AWS_ACCESS_KEY_ID: ${{ secrets.TESTING_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TESTING_AWS_SECRET_ACCESS_KEY }}
      ALLOWED_DOMAIN: ${{ secrets.STAGING_ALLOWED_DOMAIN }}
      CONTENT_BUCKET: ${{ secrets.TESTING_CONTENT_BUCKET }}
      GOOGLE_CLIENT_ID: ${{ secrets.TESTING_GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.TESTING_GOOGLE_CLIENT_SECRET }}
      SOCIAL_CARE_API_ENDPOINT: ${{ secrets.STAGING_SOCIAL_CARE_API_ENDPOINT }}
      SOCIAL_CARE_API_KEY: ${{ secrets.STAGING_SOCIAL_CARE_API_KEY }}
      NEXT_PUBLIC_SOCIAL_CARE_APP_URL: ${{ secrets.STAGING_NEXT_PUBLIC_SOCIAL_CARE_APP_URL }}
      GA_PROPERTY_ID: "N/A"
      NOTIFY_API_KEY: ${{ secrets.STAGING_NOTIFY_API_KEY }}
      NOTIFY_APPROVER_TEMPLATE_ID: ${{ secrets.STAGING_NOTIFY_APPROVER_TEMPLATE_ID }}
      NOTIFY_RETURN_FOR_EDITS_TEMPLATE_ID: ${{ secrets.STAGING_NOTIFY_RETURN_FOR_EDITS_TEMPLATE_ID }}
      NOTIFY_NEXT_STEP_TEMPLATE_ID: ${{ secrets.STAGING_NOTIFY_NEXT_STEP_TEMPLATE_ID }}
      NOTIFY_ASSIGNEE_TEMPLATE_ID: ${{secrets.STAGING_NOTIFY_ASSIGNEE_TEMPLATE_ID}}
      HACKNEY_AUTH_TOKEN_SECRET: ${{ secrets.HACKNEY_AUTH_TOKEN_SECRET }}
      HACKNEY_AUTH_COOKIE_NAME: ${{ secrets.HACKNEY_AUTH_COOKIE_NAME }}
      HISTORIC_MAPPING_DATA_SOURCE: ${{secrets.STAGING_HISTORIC_MAPPING_DATA_SOURCE}}
      SERVICE_USER_PRIVATE_KEY: ${{secrets.STAGING_SERVICE_USER_PRIVATE_KEY}}
      SERVICE_USER_EMAIL: ${{secrets.STAGING_SERVICE_USER_EMAIL}}
      REPORTING_GOOGLE_EMAIL: ${{ secrets.STAGING_REPORTING_GOOGLE_EMAIL }}
      REPORTING_GOOGLE_PRIVATE_KEY: ${{ secrets.STAGING_REPORTING_GOOGLE_PRIVATE_KEY }}
      SENTRY_RELEASE: ${{github.sha}}
      SENTRY_DSN: ${{secrets.SENTRY_DSN}}
      SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
      GMAIL_INBOUND_TOKEN: ${{secrets.STAGING_GMAIL_INBOUND_TOKEN}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm ci

      - uses: satackey/action-docker-layer-caching@v0.0.11
        with:
          key: docker-layer-caching-${{ runner.os }}
          skip-save: true

      - name: Run serverless deploy
        run: npm run remote:deploy

      - name: Run migrations
        id: migrations
        continue-on-error: true
        run: npm run remote:migrate

      - name: If migrations fail, roll back
        if: steps.migrations.outcome == 'failure'
        run: |
          npm run remote:rollback
          echo "::error file=prisma/schema.prisma::The latest changes cannot be migrated"
          echo "${{ steps.migrations.outputs.stdout }}"
          echo "${{ steps.migrations.outputs.stderr }}"
          exit 1

  deploy-staging:
    name: üõ≥ Deploy to Staging
    concurrency: deploying-staging
    environment:
      name: Service - Staging
    runs-on: ubuntu-latest
    needs:
      - style-check
      - tests-unit
      - ensure-lambda-image-is-cached
    env:
      ENVIRONMENT: stg
      AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.STAGING_AWS_ACCOUNT_ID }}
      ALLOWED_DOMAIN: ${{ secrets.STAGING_ALLOWED_DOMAIN }}
      CONTENT_BUCKET: ${{ secrets.STAGING_CONTENT_BUCKET }}
      GOOGLE_CLIENT_ID: ${{ secrets.STAGING_GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.STAGING_GOOGLE_CLIENT_SECRET }}
      SOCIAL_CARE_API_ENDPOINT: ${{ secrets.STAGING_SOCIAL_CARE_API_ENDPOINT }}
      SOCIAL_CARE_API_KEY: ${{ secrets.STAGING_SOCIAL_CARE_API_KEY }}
      NEXT_PUBLIC_SOCIAL_CARE_APP_URL: ${{ secrets.STAGING_NEXT_PUBLIC_SOCIAL_CARE_APP_URL }}
      GA_PROPERTY_ID: "N/A"
      NOTIFY_API_KEY: ${{ secrets.STAGING_NOTIFY_API_KEY }}
      NOTIFY_APPROVER_TEMPLATE_ID: ${{ secrets.STAGING_NOTIFY_APPROVER_TEMPLATE_ID }}
      NOTIFY_RETURN_FOR_EDITS_TEMPLATE_ID: ${{ secrets.STAGING_NOTIFY_RETURN_FOR_EDITS_TEMPLATE_ID }}
      NOTIFY_NEXT_STEP_TEMPLATE_ID: ${{ secrets.STAGING_NOTIFY_NEXT_STEP_TEMPLATE_ID }}
      NOTIFY_ASSIGNEE_TEMPLATE_ID: ${{secrets.STAGING_NOTIFY_ASSIGNEE_TEMPLATE_ID}}
      HACKNEY_AUTH_TOKEN_SECRET: ${{ secrets.HACKNEY_AUTH_TOKEN_SECRET }}
      HACKNEY_AUTH_COOKIE_NAME: ${{ secrets.HACKNEY_AUTH_COOKIE_NAME }}
      HISTORIC_MAPPING_DATA_SOURCE: ${{secrets.STAGING_HISTORIC_MAPPING_DATA_SOURCE}}
      SERVICE_USER_PRIVATE_KEY: ${{secrets.STAGING_SERVICE_USER_PRIVATE_KEY}}
      SERVICE_USER_EMAIL: ${{secrets.STAGING_SERVICE_USER_EMAIL}}
      REPORTING_GOOGLE_EMAIL: ${{ secrets.STAGING_REPORTING_GOOGLE_EMAIL }}
      REPORTING_GOOGLE_PRIVATE_KEY: ${{ secrets.STAGING_REPORTING_GOOGLE_PRIVATE_KEY }}
      SENTRY_RELEASE: ${{github.sha}}
      SENTRY_DSN: ${{secrets.SENTRY_DSN}}
      SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
      GMAIL_INBOUND_TOKEN: ${{secrets.STAGING_GMAIL_INBOUND_TOKEN}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm ci

      - uses: satackey/action-docker-layer-caching@v0.0.11
        with:
          key: docker-layer-caching-${{ runner.os }}
          skip-save: true

      - name: Run serverless deploy
        run: npm run remote:deploy

      - name: Run migrations
        id: migrations
        continue-on-error: true
        run: npm run remote:migrate

      - name: If migrations fail, roll back
        if: steps.migrations.outcome == 'failure'
        run: |
          npm run remote:rollback
          echo "::error file=prisma/schema.prisma::The latest changes cannot be migrated"
          echo "${{ steps.migrations.outputs.stdout }}"
          echo "${{ steps.migrations.outputs.stderr }}"
          exit 1

  deploy-production:
    name: üöÄ Deploy to Production
    concurrency: deploying-production
    environment:
      name: Service - Production
    runs-on: ubuntu-latest
    needs:
      - deploy-staging
      - tests-browser
      - baseline-scan
    env:
      ENVIRONMENT: prod
      AWS_ACCESS_KEY_ID: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.PRODUCTION_AWS_ACCOUNT_ID }}
      ALLOWED_DOMAIN: ${{ secrets.PRODUCTION_ALLOWED_DOMAIN }}
      CONTENT_BUCKET: ${{ secrets.PRODUCTION_CONTENT_BUCKET }}
      GOOGLE_CLIENT_ID: ${{ secrets.PRODUCTION_GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.PRODUCTION_GOOGLE_CLIENT_SECRET }}
      SOCIAL_CARE_API_ENDPOINT: ${{ secrets.PRODUCTION_SOCIAL_CARE_API_ENDPOINT }}
      SOCIAL_CARE_API_KEY: ${{ secrets.PRODUCTION_SOCIAL_CARE_API_KEY }}
      NEXT_PUBLIC_SOCIAL_CARE_APP_URL: ${{ secrets.PRODUCTION_NEXT_PUBLIC_SOCIAL_CARE_APP_URL }}
      GA_PROPERTY_ID: ${{ secrets.PRODUCTION_NEXT_PUBLIC_GA_PROPERTY_ID }}
      NOTIFY_API_KEY: ${{ secrets.PRODUCTION_NOTIFY_API_KEY }}
      NOTIFY_APPROVER_TEMPLATE_ID: ${{ secrets.PRODUCTION_NOTIFY_APPROVER_TEMPLATE_ID }}
      NOTIFY_RETURN_FOR_EDITS_TEMPLATE_ID: ${{ secrets.PRODUCTION_NOTIFY_RETURN_FOR_EDITS_TEMPLATE_ID }}
      NOTIFY_NEXT_STEP_TEMPLATE_ID: ${{ secrets.PRODUCTION_NOTIFY_NEXT_STEP_TEMPLATE_ID }}
      NOTIFY_ASSIGNEE_TEMPLATE_ID: ${{secrets.PRODUCTION_NOTIFY_ASSIGNEE_TEMPLATE_ID}}
      HACKNEY_AUTH_TOKEN_SECRET: ${{ secrets.HACKNEY_AUTH_TOKEN_SECRET }}
      HACKNEY_AUTH_COOKIE_NAME: ${{ secrets.HACKNEY_AUTH_COOKIE_NAME }}
      HISTORIC_MAPPING_DATA_SOURCE: ${{secrets.PRODUCTION_HISTORIC_MAPPING_DATA_SOURCE}}
      SERVICE_USER_PRIVATE_KEY: ${{secrets.PRODUCTION_SERVICE_USER_PRIVATE_KEY}}
      SERVICE_USER_EMAIL: ${{secrets.PRODUCTION_SERVICE_USER_EMAIL}}
      REPORTING_GOOGLE_EMAIL: ${{ secrets.PRODUCTION_REPORTING_GOOGLE_EMAIL }}
      REPORTING_GOOGLE_PRIVATE_KEY: ${{ secrets.PRODUCTION_REPORTING_GOOGLE_PRIVATE_KEY }}
      SENTRY_RELEASE: ${{github.sha}}
      SENTRY_DSN: ${{secrets.SENTRY_DSN}}
      SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
      GMAIL_INBOUND_TOKEN: ${{secrets.PRODUCTION_GMAIL_INBOUND_TOKEN}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm ci

      - uses: satackey/action-docker-layer-caching@v0.0.11
        with:
          key: docker-layer-caching-${{ runner.os }}
          skip-save: true

      - name: Run serverless deploy
        run: npm run remote:deploy

      - name: Run migrations
        id: migrations
        continue-on-error: true
        run: npm run remote:migrate

      - name: If migrations fail, roll back
        if: steps.migrations.outcome == 'failure'
        run: |
          npm run remote:rollback
          echo "::error file=prisma/schema.prisma::The latest changes cannot be migrated"
          echo "${{ steps.migrations.outputs.stdout }}"
          echo "${{ steps.migrations.outputs.stderr }}"
          exit 1
