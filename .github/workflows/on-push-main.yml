name: On push to main

on:
  push:
    branches: [main]

jobs:
  style-check:
    name: üíÖ Style Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: |
          npm ci --ignore-scripts
          npm install prisma@$(cat package.json | jq '.dependencies.prisma' -r)

      - name: Generate prisma exports
        run: npm run build:prisma

      - name: Run lint
        run: npm run lint

      - name: Check types
        run: npm run typecheck

  tests-browser:
    name: üñ•Ô∏è Browser Tests
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/postgres"
      NEXT_PUBLIC_API_HOST: "http://localhost:3000"
      NEXTAUTH_URL: "http://localhost:3000"
      NODE_ENV: "test"
      NEXT_PUBLIC_ENV: "test"
      NEXT_PUBLIC_SOCIAL_CARE_APP_URL: "http://example.com"
      SOCIAL_CARE_API_ENDPOINT: ${{ secrets.TESTING_SOCIAL_CARE_API_ENDPOINT }}
      PORT: "3000"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm ci

      - name: Start Database
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: "13"
          postgresql db: "postgres"
          postgresql user: "postgres"
          postgresql password: "postgres"

      - name: Setup Database
        run: |
          npm run db:push
          npm run db:seed

      - name: Build app
        run: npm run build

      - name: Run browser tests
        uses: cypress-io/github-action@v2
        with:
          start: npm start
          wait-on: http://localhost:3000/

      - name: Upload screenshots
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Upload videos
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

  tests-unit:
    name: üß™ Unit tests
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_API_HOST: "http://localhost:3000"
      NEXTAUTH_URL: "http://localhost:3000"
      NODE_ENV: "test"
      NEXT_PUBLIC_ENV: "test"
      NEXT_PUBLIC_SOCIAL_CARE_APP_URL: "http://example.com"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: |
          npm ci --ignore-scripts
          npm install prisma@$(cat package.json | jq '.dependencies.prisma' -r)

      - name: Generate prisma exports
        run: npm run build:prisma

      - name: Run unit tests
        run: npm test

  deploy-staging:
    name: üõ≥ Deploy to Staging
    concurrency: deploying-staging
    environment:
      name: Service - Staging
    runs-on: ubuntu-latest
    needs:
      - style-check
      - tests-unit
    env:
      ENVIRONMENT: stg
      AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
      ALLOWED_DOMAIN: ${{ secrets.STAGING_ALLOWED_DOMAIN }}
      CONTENT_BUCKET: ${{ secrets.STAGING_CONTENT_BUCKET }}
      GOOGLE_CLIENT_ID: ${{ secrets.STAGING_GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.STAGING_GOOGLE_CLIENT_SECRET }}
      SOCIAL_CARE_API_ENDPOINT: ${{ secrets.STAGING_SOCIAL_CARE_API_ENDPOINT }}
      SOCIAL_CARE_API_KEY: ${{ secrets.STAGING_SOCIAL_CARE_API_KEY }}
      NEXT_PUBLIC_SOCIAL_CARE_APP_URL: ${{ secrets.STAGING_NEXT_PUBLIC_SOCIAL_CARE_APP_URL }}
      NOTIFY_API_KEY: ${{ secrets.STAGING_NOTIFY_API_KEY }}
      NOTIFY_APPROVER_TEMPLATE_ID: ${{ secrets.STAGING_NOTIFY_APPROVER_TEMPLATE_ID }}
      NOTIFY_RETURN_FOR_EDITS_TEMPLATE_ID: ${{ secrets.STAGING_NOTIFY_RETURN_FOR_EDITS_TEMPLATE_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm ci

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - uses: aws-actions/amazon-ecr-login@v1

      - name: Run serverless deploy
        run: npm run remote:deploy

      - name: Run migrations
        id: migrations
        continue-on-error: true
        run: npm run remote:migrate

      - name: If migrations fail, roll back
        if: steps.migrations.outcome == 'failure'
        run: npm run remote:rollback

  deploy-production:
    name: üöÄ Deploy to Production
    concurrency: deploying-production
    environment:
      name: Service - Production
    runs-on: ubuntu-latest
    needs:
      - deploy-staging
      - tests-browser
    env:
      ENVIRONMENT: prod
      AWS_ACCESS_KEY_ID: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-2
      ALLOWED_DOMAIN: ${{ secrets.PRODUCTION_ALLOWED_DOMAIN }}
      CONTENT_BUCKET: ${{ secrets.PRODUCTION_CONTENT_BUCKET }}
      GOOGLE_CLIENT_ID: ${{ secrets.PRODUCTION_GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.PRODUCTION_GOOGLE_CLIENT_SECRET }}
      SOCIAL_CARE_API_ENDPOINT: ${{ secrets.PRODUCTION_SOCIAL_CARE_API_ENDPOINT }}
      SOCIAL_CARE_API_KEY: ${{ secrets.PRODUCTION_SOCIAL_CARE_API_KEY }}
      NEXT_PUBLIC_SOCIAL_CARE_APP_URL: ${{ secrets.PRODUCTION_NEXT_PUBLIC_SOCIAL_CARE_APP_URL }}
      NOTIFY_API_KEY: ${{ secrets.PRODUCTION_NOTIFY_API_KEY }}
      NOTIFY_APPROVER_TEMPLATE_ID: ${{ secrets.PRODUCTION_NOTIFY_APPROVER_TEMPLATE_ID }}
      NOTIFY_RETURN_FOR_EDITS_TEMPLATE_ID: ${{ secrets.PRODUCTION_NOTIFY_RETURN_FOR_EDITS_TEMPLATE_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm ci

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - uses: aws-actions/amazon-ecr-login@v1

      - name: Run serverless deploy
        run: npm run remote:deploy

      - name: Run migrations
        id: migrations
        continue-on-error: true
        run: npm run remote:migrate

      - name: If migrations fail, roll back
        if: steps.migrations.outcome == 'failure'
        run: npm run remote:rollback
